/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Assessment2;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author GGPC
 */
public class PanelTower extends javax.swing.JPanel {

    private List<EntityEnemy> monsterList = new ArrayList<>();
    private Model model = new Model();

    /**
     * Creates new form PanelTower
     */
    public PanelTower(Model currModel) {
        model = currModel;
        monsterList = model.createMonsters();
        System.out.println(model.stageNum);        
        
        initComponents();

        monsterLabel1.setVisible(false);
        monsterLabel2.setVisible(false);
        monsterLabel3.setVisible(false);
        monsterLevel1.setVisible(false);
        monsterLevel2.setVisible(false);
        monsterLevel3.setVisible(false);
        monsterHP1.setVisible(false);
        monsterHP2.setVisible(false);
        monsterHP3.setVisible(false);
        monsterSelect1.setVisible(false);
        monsterSelect2.setVisible(false);
        monsterSelect3.setVisible(false);

        for (int i = 0; i < monsterList.size(); i++) {
            if (i == 0) {
                monsterLabel1.setText(monsterList.get(i).getMobType());
                monsterLevel1.setText("Level: " + monsterList.get(i).getLevel());
                monsterHP1.setText("Health: " + monsterList.get(i).getStats().get("Vitality"));
                monsterLabel1.setVisible(true);
                monsterLevel1.setVisible(true);
                monsterHP1.setVisible(true);
            } else if (i == 1) {
                monsterLabel2.setText(monsterList.get(i).getMobType());
                monsterLevel2.setText("Level: " + monsterList.get(i).getLevel());
                monsterHP2.setText("Health: " + monsterList.get(i).getStats().get("Vitality"));
                monsterLabel2.setVisible(true);
                monsterLevel2.setVisible(true);
                monsterHP2.setVisible(true);
            } else {
                monsterLabel3.setText(monsterList.get(i).getMobType());
                monsterLevel3.setText("Level: " + monsterList.get(i).getLevel());
                monsterHP3.setText("Health: " + monsterList.get(i).getStats().get("Vitality"));
                monsterLabel3.setVisible(true);
                monsterLevel3.setVisible(true);
                monsterHP3.setVisible(true);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        charName = new javax.swing.JLabel();
        charHP = new javax.swing.JLabel();
        charTwiceStones = new javax.swing.JLabel();
        monsterLabel1 = new javax.swing.JLabel();
        actionAttack = new javax.swing.JButton();
        actionDef = new javax.swing.JButton();
        actionHeal = new javax.swing.JButton();
        monsterLabel2 = new javax.swing.JLabel();
        monsterLabel3 = new javax.swing.JLabel();
        battleLogHeaderLabel = new javax.swing.JLabel();
        banner = new javax.swing.JLabel();
        monsterLevel1 = new javax.swing.JLabel();
        monsterHP1 = new javax.swing.JLabel();
        monsterLevel2 = new javax.swing.JLabel();
        monsterLevel3 = new javax.swing.JLabel();
        monsterHP2 = new javax.swing.JLabel();
        monsterHP3 = new javax.swing.JLabel();
        monsterSelect1 = new javax.swing.JButton();
        monsterSelect2 = new javax.swing.JButton();
        monsterSelect3 = new javax.swing.JButton();
        battleLog = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        setBackground(new java.awt.Color(252, 200, 155));

        charName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        charName.setForeground(new java.awt.Color(255, 255, 255));
        charName.setText("Character Name: " + model.player.getCharName());

        charHP.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        charHP.setForeground(new java.awt.Color(255, 255, 255));
        charHP.setText("HP: " + model.playerStats.get("Vitality"));

        charTwiceStones.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        charTwiceStones.setForeground(new java.awt.Color(255, 255, 255));
        charTwiceStones.setText("Twice Stones: " + model.player.getExp());

        monsterLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monsterLabel1.setForeground(new java.awt.Color(255, 255, 255));
        monsterLabel1.setText("Monster");

        actionAttack.setBackground(new java.awt.Color(255, 95, 162));
        actionAttack.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        actionAttack.setForeground(new java.awt.Color(255, 255, 255));
        actionAttack.setText("Attack");
        actionAttack.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        actionAttack.setFocusable(false);
        actionAttack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionAttackActionPerformed(evt);
            }
        });

        actionDef.setBackground(new java.awt.Color(255, 95, 162));
        actionDef.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        actionDef.setForeground(new java.awt.Color(255, 255, 255));
        actionDef.setText("Defend");
        actionDef.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        actionDef.setFocusable(false);
        actionDef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionDefActionPerformed(evt);
            }
        });

        actionHeal.setBackground(new java.awt.Color(255, 95, 162));
        actionHeal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        actionHeal.setForeground(new java.awt.Color(255, 255, 255));
        actionHeal.setText("Heal");
        actionHeal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        actionHeal.setFocusable(false);
        actionHeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionHealActionPerformed(evt);
            }
        });

        monsterLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monsterLabel2.setForeground(new java.awt.Color(255, 255, 255));
        monsterLabel2.setText("Monster");

        monsterLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monsterLabel3.setForeground(new java.awt.Color(255, 255, 255));
        monsterLabel3.setText("Monster");

        battleLogHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        battleLogHeaderLabel.setForeground(new java.awt.Color(255, 255, 255));
        battleLogHeaderLabel.setText("Battle Log:");

        banner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assessment2/assets/banner.PNG"))); // NOI18N

        monsterLevel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monsterLevel1.setForeground(new java.awt.Color(255, 255, 255));
        monsterLevel1.setText("Level");

        monsterHP1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monsterHP1.setForeground(new java.awt.Color(255, 255, 255));
        monsterHP1.setText("HP");

        monsterLevel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monsterLevel2.setForeground(new java.awt.Color(255, 255, 255));
        monsterLevel2.setText("Level");

        monsterLevel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monsterLevel3.setForeground(new java.awt.Color(255, 255, 255));
        monsterLevel3.setText("Level");

        monsterHP2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monsterHP2.setForeground(new java.awt.Color(255, 255, 255));
        monsterHP2.setText("HP");

        monsterHP3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monsterHP3.setForeground(new java.awt.Color(255, 255, 255));
        monsterHP3.setText("HP");

        monsterSelect1.setBackground(new java.awt.Color(255, 95, 162));
        monsterSelect1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monsterSelect1.setForeground(new java.awt.Color(255, 255, 255));
        monsterSelect1.setText("Select");
        monsterSelect1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        monsterSelect1.setFocusable(false);
        monsterSelect1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monsterSelect1ActionPerformed(evt);
            }
        });

        monsterSelect2.setBackground(new java.awt.Color(255, 95, 162));
        monsterSelect2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monsterSelect2.setForeground(new java.awt.Color(255, 255, 255));
        monsterSelect2.setText("Select");
        monsterSelect2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        monsterSelect2.setFocusable(false);
        monsterSelect2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monsterSelect2ActionPerformed(evt);
            }
        });

        monsterSelect3.setBackground(new java.awt.Color(255, 95, 162));
        monsterSelect3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monsterSelect3.setForeground(new java.awt.Color(255, 255, 255));
        monsterSelect3.setText("Select");
        monsterSelect3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        monsterSelect3.setFocusable(false);
        monsterSelect3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monsterSelect3ActionPerformed(evt);
            }
        });

        battleLog.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(banner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(monsterLevel1, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(monsterHP1)
                                            .addGap(14, 14, 14)))
                                    .addComponent(monsterLabel1)
                                    .addComponent(monsterSelect1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(monsterHP2)
                                            .addComponent(monsterLevel2)
                                            .addComponent(monsterLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(monsterSelect2)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(monsterLevel3)
                                    .addComponent(monsterLabel3)
                                    .addComponent(monsterHP3)
                                    .addComponent(monsterSelect3)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(charName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(battleLogHeaderLabel)
                                .addGap(56, 56, 56)))
                        .addGap(34, 34, 34))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(actionHeal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(actionAttack, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(actionDef, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(charTwiceStones, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(charHP, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(battleLog)
                        .addGap(112, 112, 112))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(banner)
                .addGap(92, 92, 92)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monsterLabel1)
                    .addComponent(monsterLabel3)
                    .addComponent(monsterLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monsterLevel1)
                    .addComponent(monsterLevel2)
                    .addComponent(monsterLevel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monsterHP1)
                    .addComponent(monsterHP2)
                    .addComponent(monsterHP3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(monsterSelect3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(monsterSelect1)
                        .addComponent(monsterSelect2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(charName)
                    .addComponent(battleLogHeaderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(charHP)
                    .addComponent(battleLog))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(charTwiceStones)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(actionDef, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(actionAttack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addComponent(actionHeal, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void actionDefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionDefActionPerformed
        model.characterDefend();

        if (!model.monsterAction()) {
            charHP.setText(Integer.toString(model.currentHP));
        } else {
            this.setVisible(false);

            this.getParent().add(new PanelDeath(model));
            this.getParent().revalidate();
            this.getParent().repaint();
        }

    }//GEN-LAST:event_actionDefActionPerformed

    private void actionHealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionHealActionPerformed
        model.characterHeal();

        if (!model.monsterAction()) {
            charHP.setText(Integer.toString(model.currentHP));
        } else {
            this.setVisible(false);

            this.getParent().add(new PanelDeath(model));
            this.getParent().revalidate();
            this.getParent().repaint();
        }
    }//GEN-LAST:event_actionHealActionPerformed

    private void actionAttackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionAttackActionPerformed

        for (int i = 0; i < monsterList.size(); i++) {
            if (i == 0) {
                monsterSelect1.setVisible(true);
            } else if (i == 1) {
                monsterSelect2.setVisible(true);
            } else {
                monsterSelect3.setVisible(true);
            }
        }
    }//GEN-LAST:event_actionAttackActionPerformed

    private void monsterSelect1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monsterSelect1ActionPerformed
        // TODO add your handling code here:
        if (model.characterAttack(0)) {
            monsterHP1.setText("Health: 0");
            monsterSelect1.setEnabled(false);
        } else {
            monsterHP1.setText("Health: " + monsterList.get(0).getStats().get("Vitality"));
        }

        monsterSelect1.setVisible(false);
        monsterSelect2.setVisible(false);
        monsterSelect3.setVisible(false);

        if (model.isCleared()) {
            this.setVisible(false);

            this.getParent().add(new PanelFloor(model));
            this.getParent().revalidate();
            this.getParent().repaint();
        } else {
            if (!model.monsterAction()) {
                charHP.setText(Integer.toString(model.currentHP));
            } else {
                this.setVisible(false);

                this.getParent().add(new PanelDeath(model));
                this.getParent().revalidate();
                this.getParent().repaint();
            }
        }
    }//GEN-LAST:event_monsterSelect1ActionPerformed

    private void monsterSelect2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monsterSelect2ActionPerformed
        // TODO add your handling code here:        
        if (model.characterAttack(1)) {
            monsterHP2.setText("Health: 0");
            monsterSelect2.setEnabled(false);
        } else {
            monsterHP2.setText("Health: " + monsterList.get(1).getStats().get("Vitality"));
        }

        monsterSelect1.setVisible(false);
        monsterSelect2.setVisible(false);
        monsterSelect3.setVisible(false);

        if (model.isCleared()) {
            this.setVisible(false);

            this.getParent().add(new PanelFloor(model));
            this.getParent().revalidate();
            this.getParent().repaint();
        } else {
            if (!model.monsterAction()) {
                charHP.setText(Integer.toString(model.currentHP));
            } else {
                this.setVisible(false);

                this.getParent().add(new PanelDeath(model));
                this.getParent().revalidate();
                this.getParent().repaint();
            }
        }
    }//GEN-LAST:event_monsterSelect2ActionPerformed

    private void monsterSelect3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monsterSelect3ActionPerformed
        // TODO add your handling code here:
        if (model.characterAttack(2)) {
            monsterHP3.setText("Health: 0");
            monsterSelect3.setEnabled(false);
        } else {
            monsterHP3.setText("Health: " + monsterList.get(2).getStats().get("Vitality"));
        }
        monsterSelect1.setVisible(false);
        monsterSelect2.setVisible(false);
        monsterSelect3.setVisible(false);

        if (model.isCleared()) {
            this.setVisible(false);

            this.getParent().add(new PanelFloor(model));
            this.getParent().revalidate();
            this.getParent().repaint();
        } else {
            if (!model.monsterAction()) {
                charHP.setText(Integer.toString(model.currentHP));
            } else {
                this.setVisible(false);

                this.getParent().add(new PanelDeath(model));
                this.getParent().revalidate();
                this.getParent().repaint();
            }
        }
    }//GEN-LAST:event_monsterSelect3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actionAttack;
    private javax.swing.JButton actionDef;
    private javax.swing.JButton actionHeal;
    private javax.swing.JLabel banner;
    private javax.swing.JLabel battleLog;
    private javax.swing.JLabel battleLogHeaderLabel;
    private javax.swing.JLabel charHP;
    private javax.swing.JLabel charName;
    private javax.swing.JLabel charTwiceStones;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel monsterHP1;
    private javax.swing.JLabel monsterHP2;
    private javax.swing.JLabel monsterHP3;
    private javax.swing.JLabel monsterLabel1;
    private javax.swing.JLabel monsterLabel2;
    private javax.swing.JLabel monsterLabel3;
    private javax.swing.JLabel monsterLevel1;
    private javax.swing.JLabel monsterLevel2;
    private javax.swing.JLabel monsterLevel3;
    private javax.swing.JButton monsterSelect1;
    private javax.swing.JButton monsterSelect2;
    private javax.swing.JButton monsterSelect3;
    // End of variables declaration//GEN-END:variables
}
